syntax = "proto3";

package pinger;
option go_package = "golang.conradwood.net/apis/pinger";
option java_package = "net.conradwood.apis.pinger";
import "golang.conradwood.net/apis/common/common.proto";

// result of a single ping
message PingResult {
  string IP=1;
  uint32 Milliseconds=2;
  bool Success=3; // false if timeout
}

// ping something once
message PingRequest {
  string IP=1;
}
message PingListRequest {
  string PingerID=1;
}
message PingList {
  repeated PingEntry Entries=1;
}
message PingEntry {
  uint64 ID=1;
  string IP=2;
  uint32 Interval=3;
  string MetricHostName=4;
  string PingerID=5;
  string Label=6;
  uint32 IPVersion=7; // either 4 or 6
  bool IsActive=8; // entry ignored if false
  string Label2=9; // optional filtering, default: ""
  string Label3=10; // optional filtering default: ""
  string Label4=11; // optional filtering default: ""
}
message PingTargetStatus {
  string IP=1;
  string Name=2;
  bool Reachable=3;
  uint32 Since=4;
}
message PingTargetStatusList {
  repeated PingTargetStatus Status=1;
}
message SetPingStatusRequest {
  uint64 ID=1;
  bool Success=2;
  string PingerID=3;
}
message PingStatus {
  PingEntry PingEntry=1;
  bool Currently=3;
  uint32 Since=4;
  uint32 LastOnline=5;
  uint32 LastOffline=6;
}
message PingStatusList {
  repeated PingStatus Status=1;
}

message Tag {
  uint64 ID=1;
  string TagName=2;
}

// an IP address, attached to a host
message IP {
  uint64 ID=1;
  uint32 IPVersion=2;
  string Name=3;
  string IP=4;
  Host Host=5 [(common.sql_type)="uint64",(common.sql_reference)="host.id"];
}

// a host is just a name, but it might have multiple IPs
message Host {
  uint64 ID=1;
  string Name=2;
  string PingerID=3; // optional, must be set if there is a "pinger" running on that host
}

// a uni-directional route from one ip to another
message Route {
  uint64 ID=1;
  IP SourceIP=2  [(common.sql_type)="uint64",(common.sql_reference)="ip.id"];
  IP DestIP=3  [(common.sql_type)="uint64",(common.sql_reference)="ip.id"];
}

// tags are attached to routes
message AddTagRequest {
  uint64 RouteID=1;
  Tag Tag=2;
}
message RemoveTagRequest {
  uint64 RouteID=1;
  uint64 TagID=2;
}
message TagList {
  repeated Tag Tags=1;
}
message AddIPRequest {
  uint64 HostID=1;
  string IP=2; // either ip4, ip6 or "" (if "", it will be resolved via DNS)
  uint32 IPVersion=3; // if IP is set, may be 0, otherwise must match type of IP
  string Name=4; 
}
message StatusMatrixList {
  repeated StatusMatrix Matrices=1;
}
message StatusMatrix {
  string Name=1; // e.g. "IPv6 Public"
  uint32 Failed=2;
  uint32 Working=3;
  repeated MatrixRow Rows=4;
  repeated MatrixColumnHeading ColumnHeadings=5;
}
message MatrixColumnHeading {
  string DisplayName=1; // pinger
}
message MatrixRow {
  string Hostname=1; // the one that is being pinged
  string IP=2;
  repeated MatrixEntry Entries=3;
}
message MatrixEntry {
  bool Reachable=1;
  bool Tested=2;
  string DisplayName=3; // helpfully say something meaningful like "N/A" or "OK" or "FAILED"
  string DisplayColour=4;
}

/* this service "pings"  IP Addresses. it needs special permissions to run
e.g. setcap cap_net_raw=+ep //home/cnw/go/bin/pinger-server 
*/
service Pinger {
  // execute a single ping
  rpc Ping(PingRequest) returns (PingResult);
  // get list of current ping targets and their status
  rpc PingStatus(common.Void) returns (PingTargetStatusList);
}
// this service manages lists of IP Addresses to ping for each pinger
service PingerList {
  // get ping config (list of ip addresses to ping regularly). 
  rpc GetPingList(PingListRequest) returns (PingList);
  // pinger reports a status through this RPC
  rpc SetPingStatus(SetPingStatusRequest) returns (common.Void);
  // get a list of all known status'
  rpc GetPingStatus(common.Void)returns(PingStatusList);
  // create a host
  rpc CreateHost(Host)returns(Host);
  // add an ip to host
  rpc AddIP(AddIPRequest) returns (IP);
  // create a route that is to be checked (from one ip to another)
  rpc CreateRoute(Route) returns (Route);
  // add tag to host
  rpc AddTag(AddTagRequest) returns (TagList);
  // remove tag from host
  rpc RemoveTag(RemoveTagRequest) returns (TagList);
  // get status matrix
  rpc GetStatusMatrix(common.Void) returns (StatusMatrixList);
}
